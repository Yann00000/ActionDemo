name: STG-stream-ci

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

env:
  AWS_REGION: eu-west-1
  HELM_VERSION: "v3.4.0"
  CHART_REPO: "s3://devops-helm-registry"
  CHART_REPO_NAME: "linoapp"

#   ECR_NAME: "lino-stream" # AWS ECR directory
#   CHART_NAME: "stream" # helm chart name

  MAIN_CHART_NAME_LINOAPP: linoapp
  MAIN_CHART_NAME_JOB: jobs
  MAIN_CHART_NAME_LINOAPP_WS: linoapp-ws
  MAIN_CHART_NAME_LINOAPP_DOOR: linoapp-door
  MAIN_CHART_DIR: "stg/linoapp"
  MYSQL_DATABASE: lino-app-backend_lino_db

permissions: write-all

jobs:
  InitialEnvironment:
    name: init outputs variables
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.gen-vars.outputs.IMAGE_TAG }}
      CHART_VERSION: ${{ steps.gen-vars.outputs.CHART_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ssh-known-hosts: "github.com"
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          submodules: true
      - name: Gen variables for CICD
        id: gen-vars
        env:
          SHA: ${{ github.sha }}
        run: |
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "CHART_VERSION=${GITHUB_REF#refs/heads/release/}-beta${SHA:0:5}" >> $GITHUB_OUTPUT
      - name: Job details
        run: |
          echo "Will release branch ${GITHUB_REF#refs/heads/} to STG "
          echo "Docker image name: ${{ env.ECR_NAME }}"
          echo "Docker image tag: ${{ steps.gen-vars.outputs.IMAGE_TAG }}"
          echo "Helm chart name : ${{ env.CHART_NAME }}"
          echo "Helm chart version : ${{ steps.gen-vars.outputs.CHART_VERSION }}"

#   Test:
#     name: test
#     runs-on: ubuntu-latest
#     needs: [InitialEnvironment]
#     services:
#       redis:
#         image: redis:latest
#         ports:
#           - 6379:6379
#       mysql:
#         image: mysql:8.0
#         env:
#           MYSQL_ROOT_PASSWORD: my-secret
#           MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
#         ports:
#           - 3306:3306
#         options: --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 10
#       mongodb:
#         image: mongo:4.0.27
#         ports:
#           - 27017:27017
#       kafka:
#         image: bitnami/kafka:latest
#         env:
#           KAFKA_ENABLE_KRAFT: 'yes'
#           KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
#           KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
#           KAFKA_CFG_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093'
#           KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
#           KAFKA_CFG_ADVERTISED_LISTENERS: 'PLAINTEXT://127.0.0.1:9092'
#           KAFKA_BROKER_ID: 1
#           KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@127.0.0.1:9093'
#           ALLOW_PLAINTEXT_LISTENER: 'yes'
#         ports:
#           - 9092:9092
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#         with:
#           ssh-known-hosts: "github.com"
#           ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
#           submodules: true

#       - name: Set up Go
#         uses: actions/setup-go@v3
#         with:
#           go-version: 1.16
#           cache: true

#       - name: Install Makefile & Wget
#         run: |
#           sudo apt update
#           sudo apt install make
#           sudo apt install wget

#       - name: Install flyway
#         run: |
#           wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.9.0/flyway-commandline-9.9.0-linux-x64.tar.gz | tar xvz && sudo ln -s `pwd`/flyway-9.9.0/flyway /usr/local/bin 
#           flyway --version

#       - name: GO test
#         run: make test

#   Docker:
#     name: docker
#     runs-on: ubuntu-latest
#     needs: [Test,InitialEnvironment]

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#         with:
#           ssh-known-hosts: "github.com"
#           ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
#           submodules: true

#       - name: Set up Go
#         uses: actions/setup-go@v3
#         with:
#           go-version: 1.16
#           cache: true

#       - name: Install Makefile
#         run: |
#           sudo apt update
#           sudo apt install make

#       - name: Build
#         run: make build

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push the image to Amazon ECR
#         id: build-docker-image
#         env:
#           REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           REPOSITORY: ${{ env.ECR_NAME }}
#           IMAGE_TAG: ${{ needs.InitialEnvironment.outputs.IMAGE_TAG }}
#         run: |
#           docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#           docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

#   Helm:
#     name: helm
#     runs-on: ubuntu-latest
#     needs: [Docker, InitialEnvironment]

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Install Helm
#         uses: azure/setup-helm@v3
#         with:
#           version: "${{ env.HELM_VERSION }}"

#       - name: Checkout CICD
#         uses: actions/checkout@v3
#         with:
#           repository: "lino-network/CICD"
#           token: ${{ secrets.BOT_GITHUB_TOKEN }}
#           path: CICD

#       - name: Setup Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: 3.7

#       - name: install ruamel.yaml
#         run: pip3 install ruamel.yaml==0.15.100

#       - name: change Chart.yaml
#         id: new-chart-version
#         env:
#           CHART_NAME: ${{ env.CHART_NAME }}
#           CHART_VERSION: ${{ needs.InitialEnvironment.outputs.CHART_VERSION }} # e.g. v0.1.5-1ca52
#         run: |
#           python CICD/github-action/helm/patch.py $CHART_NAME $CHART_VERSION
#           cat .helm/$CHART_NAME/Chart.yaml

#       - name: Install helm-s3
#         run: helm plugin install https://github.com/hypnoglow/helm-s3.git  --version 0.14.0

#       - name: Package helm and push to Amazon S3 helm repository
#         env:
#           REPOSITORY: ${{ env.CHART_NAME }}
#           CHART_VERSION: ${{ needs.InitialEnvironment.outputs.CHART_VERSION }}
#           CHART_REPO: ${{ env.CHART_REPO }}
#           CHART_REPO_NAME: ${{ env.CHART_REPO_NAME }}
#         run: |
#           helm repo add $CHART_REPO_NAME $CHART_REPO
#           helm repo list
#           helm repo update
#         #   helm package .helm/$REPOSITORY
#         #   helm s3 push ./$REPOSITORY-$CHART_VERSION.tgz $CHART_REPO_NAME

#   Release:
#     name: release
#     runs-on: ubuntu-latest
#     needs: [Helm, Docker, InitialEnvironment]
#     steps:
#       - name: Checkout kube-app
#         uses: actions/checkout@v3
#         with:
#           repository: "lino-network/kube-app"
#           fetch-depth: 0
#           token: ${{ secrets.BOT_GITHUB_TOKEN }}
#           path: kube-app

#       - name: Checkout kube-linoapp
#         uses: actions/checkout@v3
#         with:
#           repository: "lino-network/kube-linoapp"
#           fetch-depth: 0
#           token: ${{ secrets.BOT_GITHUB_TOKEN }}
#           path: kube-linoapp

#       - name: Checkout CICD
#         uses: actions/checkout@v3
#         with:
#           repository: "lino-network/CICD"
#           token: ${{ secrets.BOT_GITHUB_TOKEN }}
#           path: CICD

#       - name: double check new docker image & helm chart version
#         env:
#           HELM_CHART_VERSION: ${{ needs.InitialEnvironment.outputs.CHART_VERSION }}
#           IMAGE_TAG: ${{ needs.InitialEnvironment.outputs.IMAGE_TAG }}
#         run: |
#           echo $HELM_CHART_VERSION
#           echo $IMAGE_TAG

#       - name: config Bot account
#         env:
#           BOT_GITHUB_USERNAME: ${{ secrets.BOT_GITHUB_USERNAME }}
#           BOT_GITHUB_EMAIL: ${{ secrets.BOT_GITHUB_EMAIL }}
#         run: |
#           git config --global user.name $BOT_GITHUB_USERNAME
#           git config --global user.email $BOT_GITHUB_EMAIL

#       - name: Setup Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: 3.7

#       - name: install ruamel.yaml
#         run: pip3 install ruamel.yaml==0.15.100
